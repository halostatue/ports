# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                autoconf
version             2.69
categories          devel
# there is an exception that basically means dependents don't have to be GPL
platforms           darwin
supported_archs     noarch
license             {Autoconf GPL-2+}
maintainers         {larryv @larryv}

description         Automatically configures software for compilation
long_description    Autoconf is an extensible package of m4 macros \
                    that produce shell scripts to automatically \
                    configure software source code packages. These \
                    scripts can adapt the packages to many kinds of \
                    UNIX-like systems without manual user \
                    intervention. Autoconf creates a configuration \
                    script for a package from a template file that \
                    lists the operating system features that the \
                    package can use, in the form of m4 macro calls.
homepage            https://www.gnu.org/software/autoconf/

# The system m4 is quite outdated due to Apple's no GPLv3 policy, and
# seems to have an issue that causes an error when autoconf tries to
# print warnings. So we now always use the m4 port.
# https://savannah.gnu.org/support/index.php?110397
# https://trac.macports.org/ticket/62411
depends_lib         port:gettext \
                    port:m4
installs_libs       no

master_sites        gnu:autoconf
checksums           rmd160  7b7d711535827826f32f5847095233e1e9925a29 \
                    sha256  954bd69b391edc12d6a4a51a2dd1476543da5c6bbf05a95b59dc0dd6fd4c2969 \
                    size    1927468

# If libtool is eventually installed, it will provide glibtoolize (not libtoolize)
post-patch {
    reinplace "s|'libtoolize'|'glibtoolize'|" ${worksrcpath}/bin/autoreconf.in
}

configure.perl      /usr/bin/perl

test.run            yes
test.env            CC=${configure.cc}
test.target         check

post-destroot {
    delete ${destroot}${prefix}/share/emacs
    delete ${destroot}${prefix}/share/info
}

livecheck.type      regex
livecheck.url       https://ftp.gnu.org/gnu/${name}/?C=M&O=D
livecheck.regex     ${name}-(\\d+\\.\\d+)
